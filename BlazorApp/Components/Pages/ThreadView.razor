 <!-- // This page displays a detailed view of a discussion thread, including its title, description, and messages.
// Users can view, reply to, edit, or delete messages within the thread.
// It supports nested replies and inline editing of messages.
// Admins and thread owners can delete the entire thread along with all its messages.
// The page also handles user authentication and authorization for message and thread actions.
 -->
@page "/thread/{ThreadId:int}"
@using BlazorApp.Data
@using BlazorApp.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    @if (thread != null)
    {
        <div class="mb-3">
            <a href="/category/@thread.Category" class="btn btn-sm btn-outline-secondary">
                &laquo; Back to @thread.Category
            </a>
        </div>

        <ThreadHeader 
            Title="@thread.Title"
            Description="@thread.Description"
            Category="@thread.Category"
            PostedBy="@thread.ApplicationUser?.UserName"
            CreatedAt="@thread.CreatedAt"
            CanDelete="@(thread.ApplicationUserId == currentUserId || isAdmin)"
            OnDelete="DeleteThread" />

        <AuthorizeView>
            <Authorized>
                <div class="card p-4 shadow-sm">
                    <h4 class="mb-4">Messages</h4>

                    <MessageInput 
                        MessageText="@newMessageText"
                        ReplyingTo="@replyPreview"
                        OnSend="HandleSendMessage"
                        OnCancelReply="CancelReply" />

                    <MessageList 
                        Messages="@messages"
                        CurrentUserId="@currentUserId"
                        IsAdmin="@isAdmin"
                        OnReply="SetReplyContext"
                        OnEdit="SaveEdit"
                        OnDelete="DeleteMessage" />
                </div>
            </Authorized>
            <NotAuthorized>
                <p class="text-center text-danger">You must be logged in to participate in discussions.</p>
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <div class="alert alert-warning">
            Loading thread information...
        </div>
    }
</div>

@code {
    [Parameter] public int ThreadId { get; set; }

    private Thread?                thread;
    private List<Message>          messages         = new();
    private string                 currentUser      = string.Empty;
    private string                 currentUserId    = string.Empty;
    private ApplicationUser        currentUserEntity = null!;
    private bool                   isAdmin          = false;

    // Compose state
    private string                 newMessageText   = string.Empty;
    private int?                   replyToMessageId = null;
    private string                 replyPreview     = string.Empty;

    // Edit state
    private int                    editingMessageId = -1;
    private string                 editMessageText  = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUser = user.Identity.Name!;
            var u = await UserManager.FindByNameAsync(currentUser)!;
            currentUserId     = u.Id;
            currentUserEntity = u;
            var roles = await UserManager.GetRolesAsync(u);
            isAdmin = roles.Contains("admin") || roles.Contains("mainadmin");
        }
        await LoadThreadData();
    }

    protected override async Task OnParametersSetAsync()
        => await LoadThreadData();

    private async Task LoadThreadData()
    {
        thread = await dbContext.Threads
            .Include(t => t.ApplicationUser)
            .FirstOrDefaultAsync(t => t.Id == ThreadId);

        if (thread != null)
        {
            messages = await dbContext.Messages
                .Where(m => m.ThreadId == ThreadId)
                .OrderBy(m => m.Timestamp)
                .Include(m => m.ApplicationUser)
                .Include(m => m.ParentMessage)
                .ToListAsync();
        }
    }

    private async Task HandleSendMessage(string text)
    {
        if (string.IsNullOrWhiteSpace(text) || thread == null)
            return;

        var msg = new Message
        {
            ApplicationUserId = currentUserId,
            ApplicationUser   = currentUserEntity,
            Text              = text,
            Timestamp         = DateTime.UtcNow,
            ThreadId          = ThreadId,
            ParentMessageId   = replyToMessageId,
            ReplyTo           = replyPreview
        };

        dbContext.Messages.Add(msg);
        await dbContext.SaveChangesAsync();

        // reload to get cascade replies if needed
        await LoadThreadData();

        newMessageText    = string.Empty;
        replyToMessageId  = null;
        replyPreview      = string.Empty;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await HandleSendMessage(newMessageText);
    }

    private void SetReplyContext(Message m)
    {
        replyToMessageId = m.Id;
        var snippet = m.Text.Length > 50
            ? m.Text.Substring(0, 47) + "..."
            : m.Text;
        replyPreview = $"{m.UserName}: {snippet}";
    }

    private void CancelReply()
    {
        replyToMessageId = null;
        replyPreview     = string.Empty;
    }

    private void StartEdit(Message m)
    {
        editingMessageId = m.Id;
        editMessageText  = m.Text;
    }

    private void CancelEdit()
    {
        editingMessageId = -1;
        editMessageText  = string.Empty;
    }

    private async Task SaveEdit(Message m)
    {
        var toUpdate = await dbContext.Messages.FindAsync(m.Id);
        if (toUpdate == null) return;
        if (toUpdate.ApplicationUserId != currentUserId && !isAdmin)
            return;

        toUpdate.Text = m.Text;
        await dbContext.SaveChangesAsync();
        await LoadThreadData();

        editingMessageId = -1;
    }

    private async Task DeleteMessage(int messageId)
    {
        var msg = await dbContext.Messages.FindAsync(messageId);
        if (msg == null) return;
        if (msg.ApplicationUserId != currentUserId && !isAdmin)
            return;

        dbContext.Messages.Remove(msg);
        await dbContext.SaveChangesAsync();
        await LoadThreadData();
    }

    private async Task DeleteThread()
    {
        if (thread == null) return;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "Are you sure you want to delete this thread and ALL its messages?");
        if (!confirmed) return;

        if (thread.ApplicationUserId == currentUserId || isAdmin)
        {
            dbContext.Threads.Remove(thread);
            await dbContext.SaveChangesAsync();

            await JSRuntime.InvokeVoidAsync("alert", "Thread deleted successfully.");
            NavigationManager.NavigateTo($"/category/{thread.Category}");
        }
    }
}
