@page "/thread/{ThreadId:int}"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .message {
        padding: 12px;
        margin-bottom: 15px;
        border-radius: 8px;
        background-color: #ffffff;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .message-reply {
        border-left: 4px solid #0d6efd;
        margin-left: 15px;
        background-color: rgba(13, 110, 253, 0.04);
    }

    .reply-indicator {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        color: #6c757d;
        padding: 4px 8px;
        background-color: rgba(13, 110, 253, 0.08);
        border-radius: 4px;
    }

    .reply-indicator span {
        margin-right: 6px;
        font-size: 1.2em;
    }

    .message-actions {
        display: flex;
        gap: 8px;
        margin-top: 8px;
    }

    .edit-input {
        margin-top: 8px;
        margin-bottom: 8px;
    }

    .messages-box {
        padding: 16px;
    }
</style>

<div class="container mt-5">
    @if (thread != null)
    {
        <div class="mb-3">
            <a href="/category/@thread.Category" class="btn btn-sm btn-outline-secondary">&laquo; Back to @thread.Category</a>
        </div>
        
        <div class="card p-4 shadow-sm mb-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3>@thread.Title</h3>
                <small class="text-muted">Created @thread.CreatedAt.ToLocalTime().ToString("g")</small>
            </div>
            
            @if (!string.IsNullOrEmpty(thread.Description))
            {
                <p class="lead mb-3">@thread.Description</p>
            }
            
            <div class="mb-2">
                <span class="badge bg-info">@thread.Category</span>
                <small class="ms-2">Posted by @thread.ApplicationUser?.UserName</small>
            </div>
            
            @if (thread.ApplicationUserId == currentUserId || isAdmin)
            {
                <div class="mt-2 mb-3">
                    <button class="btn btn-sm btn-outline-danger" @onclick="DeleteThread">Delete Thread</button>
                </div>
            }
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="card p-4 shadow-sm">
                    <h4 class="mb-4">Messages</h4>
                    
                    <div class="mb-3">
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="newMessageText" @onkeypress="HandleKeyPress" placeholder="Write a message..." />
                            <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(newMessageText)">Send</button>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(replyingToMessage))
                    {
                        <div class="alert alert-info d-flex justify-content-between align-items-center mb-3">
                            <span><strong>Replying to:</strong> @replyingToMessage</span>
                            <button class="btn btn-sm btn-outline-danger" @onclick="CancelReply">Cancel</button>
                        </div>
                    }

                    <div class="messages-box border rounded" style="max-height: 500px; overflow-y: auto; background-color: #f8f9fa;">
                        @if (messages.Any())
                        {
                            @foreach (var message in messages)
                            {
                                <div class="message @(string.IsNullOrEmpty(message.ReplyTo) ? "" : "message-reply")">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <strong>@message.UserName</strong>
                                        <small class="text-muted">@message.Timestamp.ToLocalTime().ToString("g")</small>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(message.ReplyTo))
                                    {
                                        <div class="reply-indicator">
                                            <span>â†ª</span>
                                            <small>Replying to: @message.ReplyTo</small>
                                        </div>
                                    }

                                    @if (editingMessageId == message.Id)
                                    {
                                        <div class="edit-input">
                                            <div class="input-group">
                                                <textarea class="form-control" @bind="editMessageText" rows="3"></textarea>
                                            </div>
                                            <div class="d-flex justify-content-end mt-2 gap-2">
                                                <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                                <button class="btn btn-sm btn-success" @onclick="() => SaveEdit(message)">Save</button>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-2 mb-2">@message.Text</div>
                                    }

                                    <div class="message-actions">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => SetReplyContext(message)">Reply</button>
                                        @if (message.ApplicationUserId == currentUserId || isAdmin)
                                        {
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => StartEdit(message)">Edit</button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteMessage(message.Id)">Delete</button>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted p-4">No messages in this thread yet. Start the conversation!</div>
                        }
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <p class="text-center text-danger">You must be logged in to participate in discussions.</p>
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <div class="alert alert-warning">
            Loading thread information...
        </div>
    }
</div>

@code {
    [Parameter]
    public int ThreadId { get; set; }

    private Thread? thread;
    private List<Message> messages = new();
    private string currentUser = string.Empty;
    private string currentUserId = string.Empty;
    private ApplicationUser currentUserEntity = null!;
    private string newMessageText = string.Empty;
    private string replyingToMessage = string.Empty;
    private bool isAdmin = false;
    
    // For editing messages
    private int editingMessageId = -1;
    private string editMessageText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = user.Identity.Name ?? "Unknown";

            var identityUser = await UserManager.FindByNameAsync(currentUser);
            if (identityUser != null)
            {
                currentUserId = identityUser.Id;
                currentUserEntity = identityUser;
                var roles = await UserManager.GetRolesAsync(identityUser);
                isAdmin = roles.Contains("mainadmin") || roles.Contains("admin");
            }
        }

        await LoadThreadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadThreadData();
    }

    private async Task LoadThreadData()
    {
        thread = await dbContext.Threads
            .Include(t => t.ApplicationUser)
            .FirstOrDefaultAsync(t => t.Id == ThreadId);

        if (thread != null)
        {
            messages = await dbContext.Messages
                .Where(m => m.ThreadId == ThreadId)
                .OrderBy(m => m.Timestamp)
                .Include(m => m.ApplicationUser)
                .ToListAsync();
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageText) && thread != null)
        {
            var message = new Message
            {
                ApplicationUserId = currentUserId,
                ApplicationUser = currentUserEntity,
                Text = newMessageText,
                Timestamp = DateTime.UtcNow,
                ThreadId = ThreadId,
                Thread = thread,
                ReplyTo = replyingToMessage,
                ChatRoom = thread.Title
            };

            dbContext.Messages.Add(message);
            await dbContext.SaveChangesAsync();
            
            messages.Add(message);
            newMessageText = string.Empty;
            replyingToMessage = string.Empty;
            
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task DeleteMessage(int messageId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this message?");
        if (!confirmed)
            return;
            
        var message = await dbContext.Messages.FindAsync(messageId);
        if (message != null && (message.ApplicationUserId == currentUserId || isAdmin))
        {
            dbContext.Messages.Remove(message);
            await dbContext.SaveChangesAsync();
            
            messages.Remove(message);
            await JSRuntime.InvokeVoidAsync("alert", "Message deleted successfully");
            StateHasChanged();
        }
    }

    private async Task DeleteThread()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this thread? This will permanently remove all messages and cannot be undone.");
        if (!confirmed)
            return;
            
        if (thread != null && (thread.ApplicationUserId == currentUserId || isAdmin))
        {
            // First, delete all messages in the thread
            var threadMessages = await dbContext.Messages
                .Where(m => m.ThreadId == ThreadId)
                .ToListAsync();
                
            dbContext.Messages.RemoveRange(threadMessages);
            
            // Then delete the thread itself
            dbContext.Threads.Remove(thread);
            await dbContext.SaveChangesAsync();
            
            await JSRuntime.InvokeVoidAsync("alert", "Thread deleted successfully");
            
            // Navigate back to the category page
            NavigationManager.NavigateTo($"/category/{thread.Category}");
        }
    }

    private void SetReplyContext(Message message)
    {
        // Set reply context to include both username and message text (truncated if too long)
        string messagePreview = message.Text.Length > 50 ? message.Text.Substring(0, 47) + "..." : message.Text;
        replyingToMessage = $"{message.UserName}: {messagePreview}";
    }

    private void CancelReply()
    {
        replyingToMessage = string.Empty;
    }
    
    // Message editing functionality
    private void StartEdit(Message message)
    {
        editingMessageId = message.Id;
        editMessageText = message.Text;
    }
    
    private void CancelEdit()
    {
        editingMessageId = -1;
        editMessageText = string.Empty;
    }
    
    private async Task SaveEdit(Message message)
    {
        if (string.IsNullOrWhiteSpace(editMessageText))
            return;
            
        try
        {
            var messageToUpdate = await dbContext.Messages.FindAsync(message.Id);
            if (messageToUpdate != null && (messageToUpdate.ApplicationUserId == currentUserId || isAdmin))
            {
                messageToUpdate.Text = editMessageText;
                await dbContext.SaveChangesAsync();
                
                // Update the message in our local collection
                var index = messages.FindIndex(m => m.Id == message.Id);
                if (index >= 0)
                {
                    messages[index].Text = editMessageText;
                }
                
                await JSRuntime.InvokeVoidAsync("alert", "Message updated successfully");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating message: {ex.Message}");
        }
        
        editingMessageId = -1;
        StateHasChanged();
    }
}
