@page "/admin/roles"
@using BlazorApp.Common.Constants
@using BlazorApp.Data.Models
@using BlazorApp.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@attribute [Authorize(Roles = "MainAdmin,Admin")]
@inject IRoleService RoleService
@inject ILogger<RoleManagement> Logger
@inject NavigationManager NavigationManager

<PageTitle>Role Management</PageTitle>

<h1>Role Management</h1>

<div class="mb-4">
    <h3>Users and Roles</h3>
    @if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (successMessage != null)
    {
        <div class="alert alert-success">@successMessage</div>
    }
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4>User Role Assignment</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="userEmail" class="form-label">User Email</label>
                    <input type="email" class="form-control" id="userEmail" @bind="selectedUserEmail" />
                </div>
                <div class="mb-3">
                    <label for="roleSelect" class="form-label">Role</label>
                    <select class="form-select" id="roleSelect" @bind="selectedRole">
                        <option value="">Select a role...</option>
                        @foreach (var role in GetAvailableRoles())
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                <button class="btn btn-primary" @onclick="AssignRoleToUser" disabled="@(!CanAssignRole())">
                    Assign Role
                </button>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4>Users by Role</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="roleFilter" class="form-label">Filter by Role</label>
                    <select class="form-select" id="roleFilter" @bind="selectedRoleFilter">
                        <option value="">All Roles</option>
                        @foreach (var role in GetAvailableRoles())
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                @if (userRoles != null && userRoles.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Email</th>
                                    <th>Roles</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in FilteredUsers)
                                {
                                    <tr>
                                        <td>@user.Email</td>
                                        <td>@string.Join(", ", user.Roles)</td>
                                        <td>
                                            @if (CanManageUser(user))
                                            {
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveUserRole(user)">
                                                    Remove Role
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>No users found.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string? selectedUserEmail;
    private string? selectedRole;
    private string? selectedRoleFilter;
    private List<UserRoleDto>? userRoles;
    private string? errorMessage;
    private string? successMessage;
    private string? currentUserRole;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserRoles();
        if (AuthState != null)
        {
            var authState = await AuthState;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                currentUserRole = user.Claims
                    .FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                    ?.Value;
            }
        }
    }

    private IEnumerable<UserRoleDto> FilteredUsers =>
        userRoles?.Where(u => string.IsNullOrEmpty(selectedRoleFilter) || 
                             u.Roles.Contains(selectedRoleFilter)) ?? 
        Enumerable.Empty<UserRoleDto>();

    private List<string> GetAvailableRoles()
    {
        if (currentUserRole == RoleConstants.MainAdmin)
            return RoleConstants.AllRoles.ToList();
        if (currentUserRole == RoleConstants.Admin)
            return new List<string> { RoleConstants.User };
        return new List<string>();
    }

    private bool CanAssignRole()
    {
        if (string.IsNullOrEmpty(selectedUserEmail) || string.IsNullOrEmpty(selectedRole))
            return false;

        return RoleConstants.HasPrivilege(currentUserRole ?? "", selectedRole);
    }

    private bool CanManageUser(UserRoleDto user)
    {
        return user.Roles.All(role => RoleConstants.HasPrivilege(currentUserRole ?? "", role));
    }

    private async Task LoadUserRoles()
    {
        try
        {
            userRoles = new List<UserRoleDto>();
            foreach (var role in RoleConstants.AllRoles)
            {
                if (RoleConstants.HasPrivilege(currentUserRole ?? "", role))
                {
                    var usersInRole = await RoleService.GetUsersInRoleAsync(role);
                    foreach (var user in usersInRole)
                    {
                        var existingUser = userRoles.FirstOrDefault(u => u.Id == user.Id);
                        if (existingUser != null)
                        {
                            existingUser.Roles.AddRange(user.Roles.Except(existingUser.Roles));
                        }
                        else
                        {
                            userRoles.Add(user);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
            Logger.LogError(ex, "Error loading user roles");
        }
    }

    private async Task AssignRoleToUser()
    {
        try
        {
            if (!CanAssignRole())
            {
                errorMessage = "You don't have permission to assign this role.";
                return;
            }

            var request = new AssignRoleRequest
            {
                UserId = selectedUserEmail ?? string.Empty,
                RoleName = selectedRole ?? string.Empty
            };

            var result = await RoleService.AssignRoleToUserAsync(request);
            if (result.Succeeded)
            {
                successMessage = "Role assigned successfully.";
                errorMessage = null;
                await LoadUserRoles();
            }
            else
            {
                errorMessage = $"Error assigning role: {string.Join(", ", result.Errors.Select(e => e.Description))}";
                successMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error assigning role to user");
        }
    }

    private async Task RemoveUserRole(UserRoleDto user)
    {
        try
        {
            if (!CanManageUser(user))
            {
                errorMessage = "You don't have permission to manage this user's roles.";
                return;
            }

            var request = new AssignRoleRequest
            {
                UserId = user.Id,
                RoleName = user.Roles.First()
            };

            var result = await RoleService.RemoveUserFromRoleAsync(request);
            if (result.Succeeded)
            {
                successMessage = "Role removed successfully.";
                errorMessage = null;
                await LoadUserRoles();
            }
            else
            {
                errorMessage = $"Error removing role: {string.Join(", ", result.Errors.Select(e => e.Description))}";
                successMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error removing user role");
        }
    }
} 