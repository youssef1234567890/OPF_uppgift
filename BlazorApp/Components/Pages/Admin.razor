@page "/admin"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@attribute [Authorize(Roles = "admin")]

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Admin Dashboard</PageTitle>

<link href="css/mainadmin.css" rel="stylesheet" />

<div class="mainadmin-container">
    <div class="mainadmin-header">
        <h1>Admin Dashboard</h1>
        <p>Manage users and content</p>
    </div>
    
    <!-- Horizontal Stats Cards -->
    <div class="stats-card">
        <div class="stats-items">
            <div class="stat-item">
                <i class="bi bi-people-fill stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@users.Count</div>
                    <div class="stat-label">Total Users</div>
                </div>
            </div>
            
            <div class="stat-divider"></div>
            
            <div class="stat-item">
                <i class="bi bi-chat-square-text-fill stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@messageCount</div>
                    <div class="stat-label">Total Messages</div>
                </div>
            </div>
            
            <div class="stat-divider"></div>
            
            <div class="stat-item">
                <i class="bi bi-person-fill-check stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@GetActiveUsersCount()</div>
                    <div class="stat-label">Active Users</div>
                </div>
            </div>
        </div>
    </div>

    <div class="mainadmin-card">
        <h3>User Management</h3>
        
        @if (loading)
        {
            <div class="mainadmin-loading">
                <i class="bi bi-arrow-repeat spin"></i>
                <p>Loading accounts...</p>
            </div>
        }
        else if (users.Any())
        {
            <div class="table-responsive">
                <table class="mainadmin-table">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Email Confirmed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-person-circle me-2"></i>
                                        @user.UserName
                                    </div>
                                </td>
                                <td>@user.Email</td>
                                <td>
                                    @if (user.EmailConfirmed)
                                    {
                                        <span class="role-badge admin">Confirmed</span>
                                    }
                                    else
                                    {
                                        <span class="role-badge user">Pending</span>
                                    }
                                </td>
                                <td>
                                    <div class="mainadmin-actions">
                                        <button class="mainadmin-button danger" @onclick="() => DeleteUser(user.Id)">
                                            <i class="bi bi-trash"></i> Delete User
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="mainadmin-empty">
                <i class="bi bi-people"></i>
                <p>No accounts found.</p>
            </div>
        }
    </div>
</div>

@code {
    // This component represents the Admin Dashboard. 
    // It allows administrators to manage users and content, including viewing user statistics, 
    // deleting users, and monitoring message activity.

    // Store the list of users and loading state
    private List<ApplicationUser> users = new();
    private bool loading = true;
    private int messageCount = 0;
    
    [Inject] private ApplicationDbContext DbContext { get; set; } = default!;

    // Initialize component and load users when the page is accessed
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
        await GetMessageCountAsync();
    }

    // Load all users asynchronously from the database
    private async Task LoadUsersAsync()
    {
        loading = true;
        users = await Task.Run(() => UserManager.Users.ToList());
        loading = false;
        StateHasChanged();
    }
    
    // Get total message count from database
    private async Task GetMessageCountAsync()
    {
        try {
            messageCount = await DbContext.Messages.CountAsync();
        }
        catch (Exception) {
            // If Messages table doesn't exist or can't be accessed
            messageCount = 0;
        }
    }
    
    // Get count of active users (mock implementation)
    private int GetActiveUsersCount()
    {
        // Count users with confirmed emails as "active"
        return users.Count(u => u.EmailConfirmed);
    }

    // Delete a user by their ID
    private async Task DeleteUser(string userId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This action cannot be undone.");
        if (!confirmed) return;
        
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                // Refresh the user list after deletion
                await LoadUsersAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete user.");
            }
        }
    }
}