@page "/admin"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@attribute [Authorize(Roles = "admin")]

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<link href="css/admin.css" rel="stylesheet" />

<div class="admin-container">
    <div class="admin-card">
        <div class="admin-header">
            <h3>Admin Dashboard</h3>
            <p>Welcome, Admin!</p>
        </div>
        
        @if (loading)
        {
            <div class="loading-state">
                <i class="bi bi-arrow-repeat spin"></i>
                <p>Loading accounts...</p>
            </div>
        }
        
        else if (users.Any())
        {
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>User Name</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <button class="delete-button" @onclick="() => DeleteUser(user.Id)">
                                    <i class="bi bi-trash"></i> Delete User
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        
        else
        {
            <div class="empty-state">
                <i class="bi bi-people"></i>
                <p>No accounts found.</p>
            </div>
        }
    </div>
</div>

<style>
    .spin {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    // Store the list of users and loading state
    private List<ApplicationUser> users = new();
    private bool loading = true;

    // Initialize component and load users when the page is accessed
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    // Load all users asynchronously from the database
    private async Task LoadUsersAsync()
    {
        loading = true;
        users = await Task.Run(() => UserManager.Users.ToList());
        loading = false;
        StateHasChanged();
    }

    // Delete a user by their ID
    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                // Refresh the user list after deletion
                await LoadUsersAsync();
            }
            else
            {
                Console.WriteLine($"Failed to delete user {userId}.");
            }
        }
    }
}
