@page "/log" 
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject LogService LogService

<link href="css/log.css" rel="stylesheet" />

<div class="log-container">
    <div class="log-header">
        <h1>Messages Overview</h1>
        <p class="log-subtitle">Overview of all chats within threads</p>
    </div>

    <div class="log-controls">
        <button class="sort-button" @onclick="ToggleSortOrder">
            <i class="bi @(sortDescending ? "bi-sort-down" : "bi-sort-up")"></i>
            Sort by Date: @(sortDescending ? "Newest First" : "Oldest First")
        </button>

        @if (isAdmin)
        {
            <div class="user-filter">
                <UserFilterDropdown Users="distinctUsers" SelectedUser="selectedUser" OnUserChanged="OnUserFilterChanged" />
            </div>
        }
        else
        {
            <div class="text-info">Viewing your messages only</div>
        }
    </div>

    @if (loading)
    {
        <div class="loading-state">
            <i class="bi bi-arrow-repeat spin"></i>
            <p>Loading logs...</p>
        </div>
    }
    else if (groupedLogs.Any())
    {
        <table class="log-table">
            <thead>
                <tr>
                    <th>Thread</th>
                    <th>User</th>
                    <th>Message</th>
                    <th>Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in groupedLogs)
                {
                    @foreach (var message in group)
                    {
                        <tr>
                            <td>@message.Thread?.Title</td>
                            <td>@message.ApplicationUser?.UserName</td>
                            <td>@message.Text</td>
                            <td>@message.Timestamp.ToString("MMM dd, yyyy HH:mm")</td>
                            <td>
                                <div class="log-actions">
                                    @if (CanEditMessage(message))
                                    {
                                        <button class="log-action-button edit" @onclick="() => StartEdit(message)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                    }
                                    @if (CanDeleteMessage(message))
                                    {
                                        <button class="log-action-button delete" @onclick="() => DeleteMessage(message)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="empty-state">
            <i class="bi bi-chat-square-text"></i>
            <p>No logs found.</p>
        </div>
    }
</div>

<style>
    .spin {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    private List<IGrouping<string, Message>> groupedLogs = new();
    private List<string> distinctUsers = new();
    private bool loading = true;
    private bool sortDescending = true;
    private string selectedUser = "All";
    private string currentUserId = "";
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = UserManager.GetUserId(user);
        isAdmin = user.IsInRole("admin") || user.IsInRole("mainadmin");

        distinctUsers = await LogService.GetDistinctUsersAsync();
        await LoadGroupedLogsAsync();
    }

    private async Task LoadGroupedLogsAsync()
    {
        loading = true;
        groupedLogs = await LogService.GetGroupedLogsAsync(isAdmin, currentUserId, selectedUser, sortDescending);
        loading = false;
    }

    private async Task ToggleSortOrder()
    {
        sortDescending = !sortDescending;
        await LoadGroupedLogsAsync();
    }

    private async Task OnUserFilterChanged(string user)
    {
        selectedUser = user;
        await LoadGroupedLogsAsync();
    }

    private bool CanEditMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private bool CanDeleteMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private async Task StartEdit(Message message)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Editing message: {message.Id}");
    }

    private async Task DeleteMessage(Message message)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Deleting message: {message.Id}");
    }
}
