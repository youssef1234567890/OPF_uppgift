@page "/log" 
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject LogService LogService

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Messages Overview</h3>
        <p class="text-center">Overview of all chats within threads.</p>

        <div class="mb-3 d-flex justify-content-between align-items-center">
            <button class="btn btn-secondary" @onclick="ToggleSortOrder">
                Sort by Date: @(sortDescending ? "Newest First" : "Oldest First")
            </button>

            @if (isAdmin)
            {
                <UserFilterDropdown Users="distinctUsers" SelectedUser="selectedUser" OnUserChanged="OnUserFilterChanged" />
            }
            else
            {
                <div class="text-info">Viewing your messages only</div>
            }
        </div>

        @if (loading)
        {
            <p class="text-center">Loading logs...</p>
        }
        else if (groupedLogs.Any())
        {
            <GroupedLogsTable GroupedLogs="groupedLogs" CanEditMessage="CanEditMessage" CanDeleteMessage="CanDeleteMessage" OnEdit="StartEdit" OnDelete="DeleteMessage" />
        }
        else
        {
            <p class="text-center text-muted">No logs found.</p>
        }
    </div>
</div>

@code {
    private List<IGrouping<string, Message>> groupedLogs = new();
    private List<string> distinctUsers = new();
    private bool loading = true;
    private bool sortDescending = true;
    private string selectedUser = "All";
    private string currentUserId = "";
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = UserManager.GetUserId(user);
        isAdmin = user.IsInRole("admin") || user.IsInRole("mainadmin");

        distinctUsers = await LogService.GetDistinctUsersAsync();
        await LoadGroupedLogsAsync();
    }

    private async Task LoadGroupedLogsAsync()
    {
        loading = true;
        groupedLogs = await LogService.GetGroupedLogsAsync(isAdmin, currentUserId, selectedUser, sortDescending);
        loading = false;
    }

    private async Task ToggleSortOrder()
    {
        sortDescending = !sortDescending;
        await LoadGroupedLogsAsync();
    }

    private async Task OnUserFilterChanged(string user)
    {
        selectedUser = user;
        await LoadGroupedLogsAsync();
    }

    private bool CanEditMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private bool CanDeleteMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private async Task StartEdit(Message message)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Editing message: {message.Id}");
    }

    private async Task DeleteMessage(Message message)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Deleting message: {message.Id}");
    }
}
