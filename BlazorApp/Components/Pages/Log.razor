@page "/log" 
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject LogService LogService

<PageTitle>Message Logs</PageTitle>

<link href="css/log.css" rel="stylesheet" />

<div class="log-container">
    <div class="log-header">
        <h1>Message Activity</h1>
        <p class="log-subtitle">View all conversations across different threads</p>
    </div>

    <div class="log-controls">
        <div class="control-group">
            <button class="sort-button @(sortDescending ? "active" : "")" @onclick="() => SetSortOrder(true)">
                <i class="bi bi-sort-down"></i>
                Newest First
            </button>
            <button class="sort-button @(!sortDescending ? "active" : "")" @onclick="() => SetSortOrder(false)">
                <i class="bi bi-sort-up"></i>
                Oldest First
            </button>
            
            @if (isAdmin)
            {
                <div class="user-filter">
                    <UserFilterDropdown Users="distinctUsers" SelectedUser="selectedUser" OnUserChanged="OnUserFilterChanged" />
                </div>
            }
        </div>
        
        <div class="text-info">
            <i class="bi bi-info-circle"></i>
            <span>Showing @(groupedLogs.Sum(g => g.Count())) messages</span>
        </div>
    </div>

    @if (loading)
    {
        <div class="loading-state">
            <i class="bi bi-hourglass-split spin"></i>
            <p>Loading messages...</p>
        </div>
    }
    else if (!groupedLogs.Any())
    {
        <div class="empty-state">
            <i class="bi bi-chat-square-text"></i>
            <p>No messages found</p>
            @if (isAdmin && selectedUser != "All")
            {
                <p>Try selecting a different user filter</p>
            }
        </div>
    }
    else
    {
        <div class="message-list">
            @foreach (var group in groupedLogs)
            {
                <div class="feature-card message-card" style="margin-bottom: 1.5rem;">
                    <div class="message-header">
                        <h3>@group.Key</h3>
                    </div>
                    
                    @foreach (var message in group)
                    {
                        <div class="message-content" style="border-top: 1px solid #e5e5e5; @(message != group.First() ? "padding-top: 1.5rem;" : "")">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="author">
                                    <i class="bi bi-person-circle"></i>
                                    @message.ApplicationUser?.UserName
                                </span>
                                <span class="timestamp">
                                    <i class="bi bi-clock"></i>
                                    @message.Timestamp.ToString("MMM dd, yyyy HH:mm")
                                </span>
                            </div>
                            
                            @if (editingMessageId == message.Id)
                            {
                                <div class="edit-form">
                                    <textarea @bind="editMessageText" placeholder="Edit your message..."></textarea>
                                    <div class="edit-actions">
                                        <button class="btn-secondary" @onclick="CancelEdit">Cancel</button>
                                        <button class="btn-success" @onclick="() => SaveEdit(message)">Save</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="message-text">@message.Text</div>
                                
                                <div class="d-flex justify-content-end mt-3">
                                    <div class="log-actions">
                                        @if (CanEditMessage(message))
                                        {
                                            <button class="log-action-button edit" @onclick="() => StartEdit(message)">
                                                <i class="bi bi-pencil-fill"></i>
                                                Edit
                                            </button>
                                        }
                                        @if (CanDeleteMessage(message))
                                        {
                                            <button class="log-action-button delete" @onclick="() => DeleteMessage(message)">
                                                <i class="bi bi-trash-fill"></i>
                                                Delete
                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<IGrouping<string, Message>> groupedLogs = new();
    private List<string> distinctUsers = new();
    private bool loading = true;
    private bool sortDescending = true;
    private string selectedUser = "All";
    private string currentUserId = "";
    private bool isAdmin = false;
    
    // For editing messages
    private int editingMessageId = -1;
    private string editMessageText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = UserManager.GetUserId(user);
        isAdmin = user.IsInRole("admin") || user.IsInRole("mainadmin");

        distinctUsers = await LogService.GetDistinctUsersAsync();
        await LoadGroupedLogsAsync();
    }

    private async Task LoadGroupedLogsAsync()
    {
        loading = true;
        groupedLogs = await LogService.GetGroupedLogsAsync(isAdmin, currentUserId, selectedUser, sortDescending);
        loading = false;
    }

    private async Task SetSortOrder(bool descending)
    {
        sortDescending = descending;
        await LoadGroupedLogsAsync();
    }

    private async Task OnUserFilterChanged(string user)
    {
        selectedUser = user;
        await LoadGroupedLogsAsync();
    }

    private bool CanEditMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private bool CanDeleteMessage(Message message)
    {
        return isAdmin || message.ApplicationUserId == currentUserId;
    }

    private void StartEdit(Message message)
    {
        editingMessageId = message.Id;
        editMessageText = message.Text;
    }

    private void CancelEdit()
    {
        editingMessageId = -1;
        editMessageText = string.Empty;
    }

    private async Task SaveEdit(Message message)
    {
        if (!string.IsNullOrWhiteSpace(editMessageText))
        {
            var messageToUpdate = await dbContext.Messages.FindAsync(message.Id);
            if (messageToUpdate != null && (messageToUpdate.ApplicationUserId == currentUserId || isAdmin))
            {
                messageToUpdate.Text = editMessageText;
                await dbContext.SaveChangesAsync();
                
                // Reload the logs to reflect the changes
                await LoadGroupedLogsAsync();
                
                // Reset editing state
                editingMessageId = -1;
                editMessageText = string.Empty;
            }
        }
    }

    private async Task DeleteMessage(Message message)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this message?");
        
        if (confirmed)
        {
            var messageToDelete = await dbContext.Messages.FindAsync(message.Id);
            if (messageToDelete != null && (messageToDelete.ApplicationUserId == currentUserId || isAdmin))
            {
                dbContext.Messages.Remove(messageToDelete);
                await dbContext.SaveChangesAsync();
                
                // Reload the logs to reflect the changes
                await LoadGroupedLogsAsync();
            }
        }
    }
}