@page "/category/{CategoryName}" 
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager


<link href="css/category.css" rel="stylesheet" />

<div class="category-container">
    <div class="category-header">
        <h1>@CategoryName Discussions</h1>
        <p class="category-subtitle">Join the conversation in @CategoryName</p>
    </div>

    <AuthorizeView>
        <Authorized>
            <div class="create-thread-button">
                <button class="btn btn-primary" @onclick="() => showCreateThread = true">
                    <i class="bi bi-plus-circle"></i> Create New Thread
                </button>
            </div>

            @if (showCreateThread)
            {
                // This component displays discussions within a specific category. 
// It allows authorized users to view threads, create new threads, and navigate to individual thread pages. 
// Unauthorized users are prompted to log in to access the content.

                <div class="create-thread-form">
                    <CreateThreadForm OnCancel="CancelCreateThread" OnCreate="HandleCreateThread" />
                </div>
            }

            <div class="thread-list">
                @foreach (var thread in threads)
                {
                    <div class="thread-card">
                        <div class="thread-header">
                            <h2 class="thread-title">@thread.Title</h2>
                            <div class="thread-meta">
                                <span><i class="bi bi-person"></i> @thread.ApplicationUser?.UserName</span>
                                <span><i class="bi bi-clock"></i> @thread.CreatedAt.ToString("MMM dd, yyyy")</span>
                                <span><i class="bi bi-chat-dots"></i> @thread.Messages?.Count messages</span>
                            </div>
                        </div>
                        <div class="thread-content">
                            <p class="thread-description">@thread.Description</p>
                        </div>
                        <div class="thread-footer">
                            <div class="thread-actions">
                                <!-- Removing the Reply and Share buttons as they have no functionality -->
                            </div>
                            <a href="/thread/@thread.Id" class="btn btn-outline-primary">View Thread</a>
                        </div>
                    </div>
                }

                @if (!threads.Any())
                {
                    <div class="empty-state">
                        <i class="bi bi-chat-square-text"></i>
                        <p>No threads found in this category. Be the first to start a discussion!</p>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="empty-state">
                <i class="bi bi-lock"></i>
                <p>You must be logged in to access forums.</p>
                <a href="/Account/Login" class="btn btn-primary mt-3">Login</a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public string CategoryName { get; set; } = string.Empty;

    private List<Thread> threads = new();
    private string currentUserId = string.Empty;
    private bool showCreateThread = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var identityUser = await UserManager.FindByNameAsync(user.Identity.Name ?? string.Empty);
            if (identityUser != null)
            {
                currentUserId = identityUser.Id;
            }
        }

        await LoadThreads();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadThreads();
    }

    private async Task LoadThreads()
    {
        threads = await dbContext.Threads
            .Where(t => t.Category == CategoryName)
            .Include(t => t.ApplicationUser)
            .Include(t => t.Messages)
            .ToListAsync();
    }

    private async Task HandleCreateThread((string Title, string Description) threadData)
    {
        var thread = new Thread
        {
            Title = threadData.Title,
            Description = threadData.Description,
            Category = CategoryName,
            CreatedAt = DateTime.UtcNow,
            ApplicationUserId = currentUserId
        };

        dbContext.Threads.Add(thread);
        await dbContext.SaveChangesAsync();

        showCreateThread = false;
        await LoadThreads();
    }

    private void CancelCreateThread()
    {
        showCreateThread = false;
    }
}
