@page "/category/{CategoryName}" 
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">@CategoryName Discussions</h3>

        <AuthorizeView>
            <Authorized>
                <div class="mb-4">
                    <button class="btn btn-primary" @onclick="() => showCreateThread = true">Create New Thread</button>
                </div>

                @if (showCreateThread)
                {
                    <CreateThreadForm OnCancel="CancelCreateThread" OnCreate="HandleCreateThread" />
                }

                <ThreadList Threads="threads" />
            </Authorized>
            <NotAuthorized>
                <p class="text-center text-danger">You must be logged in to access forums.</p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter]
    public string CategoryName { get; set; } = string.Empty;

    private List<Thread> threads = new();
    private string currentUserId = string.Empty;
    private bool showCreateThread = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var identityUser = await UserManager.FindByNameAsync(user.Identity.Name ?? string.Empty);
            if (identityUser != null)
            {
                currentUserId = identityUser.Id;
            }
        }

        await LoadThreads();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadThreads();
    }

    private async Task LoadThreads()
    {
        threads = await dbContext.Threads
            .Where(t => t.Category == CategoryName)
            .Include(t => t.ApplicationUser)
            .Include(t => t.Messages)
            .ToListAsync();
    }

    private async Task HandleCreateThread((string Title, string Description) threadData)
    {
        var thread = new Thread
        {
            Title = threadData.Title,
            Description = threadData.Description,
            Category = CategoryName,
            CreatedAt = DateTime.UtcNow,
            ApplicationUserId = currentUserId
        };

        dbContext.Threads.Add(thread);
        await dbContext.SaveChangesAsync();

        showCreateThread = false;
        await LoadThreads();
    }

    private void CancelCreateThread()
    {
        showCreateThread = false;
    }
}
