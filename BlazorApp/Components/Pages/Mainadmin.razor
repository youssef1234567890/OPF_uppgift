@page "/mainadmin"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Roles = "mainadmin")]


<PageTitle>Main Admin Dashboard</PageTitle>

<link href="css/mainadmin.css" rel="stylesheet" />

<div class="mainadmin-container">
    <div class="mainadmin-header">
        <h1>Main Admin Dashboard</h1>
        <p>Manage users, roles and permissions</p>
    </div>
    
    <!-- // This component represents the Main Admin Dashboard. 
// It allows the main administrator to manage users, roles, and permissions. 
// Features include viewing user statistics, promoting or demoting users, and deleting users.
 -->
    <div class="stats-card">
        <div class="stats-items">
            <div class="stat-item">
                <i class="bi bi-people-fill stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@users.Count</div>
                    <div class="stat-label">Total Users</div>
                </div>
            </div>
            
            <div class="stat-divider"></div>
            
            <div class="stat-item">
                <i class="bi bi-shield-fill stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@users.Count(u => u.IsAdmin)</div>
                    <div class="stat-label">Admins</div>
                </div>
            </div>
            
            <div class="stat-divider"></div>
            
            <div class="stat-item">
                <i class="bi bi-person-fill-lock stat-icon"></i>
                <div class="stat-info">
                    <div class="stat-value">@users.Count(u => u.IsMainAdmin)</div>
                    <div class="stat-label">Main Admins</div>
                </div>
            </div>
        </div>
    </div>

    <div class="mainadmin-card">
        <h3>User Management</h3>
        
        @if (loading)
        {
            <div class="mainadmin-loading">
                <i class="bi bi-arrow-repeat spin"></i>
                <p>Loading users...</p>
            </div>
        }
        else if (users.Any())
        {
            <div class="table-responsive">
                <table class="mainadmin-table">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-person-circle me-2"></i>
                                        @user.UserName
                                    </div>
                                </td>
                                <td>@user.Email</td>
                                <td>
                                    @if (user.IsMainAdmin)
                                    {
                                        <span class="role-badge mainadmin">Main Admin</span>
                                    }
                                    else if (user.IsAdmin)
                                    {
                                        <span class="role-badge admin">Admin</span>
                                    }
                                    else
                                    {
                                        <span class="role-badge user">User</span>
                                    }
                                </td>
                                <td>
                                    @if (!user.IsMainAdmin)
                                    {
                                        <div class="mainadmin-actions">
                                            @if (user.IsAdmin)
                                            {
                                                <button class="mainadmin-button warning" @onclick="() => DemoteToUser(user.Id)">
                                                    Demote to User
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="mainadmin-button primary" @onclick="() => PromoteToAdmin(user.Id)">
                                                    Promote to Admin
                                                </button>
                                            }
                                            <button class="mainadmin-button danger" @onclick="() => DeleteUser(user.Id)">
                                                Delete User
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No actions available</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="mainadmin-empty">
                <i class="bi bi-people"></i>
                <p>No users found.</p>
            </div>
        }
    </div>
</div>

@code {
    // List to hold user view models and loading flag
    private List<UserViewModel> users = new();
    private bool loading = true;

    // Inject UserManager and NavigationManager services
    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    // On initialization, load user data async
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    // LoadUsersAsync: Retrieve all users and map roles to view models
    private async Task LoadUsersAsync()
    {
        loading = true;
        var allUsers = UserManager.Users.ToList();
        users = new();

        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            users.Add(new UserViewModel
            {
                Id = user.Id,
                Email = user.Email!,
                UserName = user.UserName!,
                IsAdmin = roles.Contains("admin"),
                IsMainAdmin = roles.Contains("mainadmin")
            });
        }
        
        // Sort users: Main Admins first, then Admins, then regular Users
        users = users.OrderByDescending(u => u.IsMainAdmin)
                     .ThenByDescending(u => u.IsAdmin)
                     .ThenBy(u => u.UserName)
                     .ToList();
                     
        loading = false;
    }

    // PromoteToAdmin: Adds "admin" role to the user if not already an admin
    private async Task PromoteToAdmin(string userId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to promote this user to Admin?");
        if (!confirmed) return;
        
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null && !await UserManager.IsInRoleAsync(user, "admin"))
        {
            await UserManager.AddToRoleAsync(user, "admin");
            await LoadUsersAsync(); // Refresh user list
        }
    }

    // DemoteToUser: Removes "admin" role from the user if they are currently an admin
    private async Task DemoteToUser(string userId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to demote this admin to regular user?");
        if (!confirmed) return;
        
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null && await UserManager.IsInRoleAsync(user, "admin"))
        {
            await UserManager.RemoveFromRoleAsync(user, "admin");
            await LoadUsersAsync(); // Refresh user list
        }
    }

    // DeleteUser: Deletes a user if they are not a mainadmin
    private async Task DeleteUser(string userId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user? This action cannot be undone.");
        if (!confirmed) return;
        
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            // Prevent deletion if the user is a mainadmin
            if (await UserManager.IsInRoleAsync(user, "mainadmin"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot delete a Main Admin user.");
                return;
            }

            await UserManager.DeleteAsync(user);
            await LoadUsersAsync(); // Refresh list after deletion
        }
    }

    // UserViewModel: Holds user data and role flags for display
    private class UserViewModel
    {
        public required string Id { get; set; }
        public required string Email { get; set; }
        public required string UserName { get; set; }
        public bool IsAdmin { get; set; }
        public bool IsMainAdmin { get; set; }
    }
}