@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" placeholder="Please enter your email." />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" placeholder="New password" />
                <label for="new-password" class="form-label">New Password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" placeholder="Confirm new password" />
                <label for="confirm-password" class="form-label">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Save Changes</button>
        </EditForm>

        <div class="mt-4 border-top pt-4">
            <h4>Delete Account</h4>
            <p class="text-danger">Warning: This action cannot be undone.</p>
            <button @onclick="DeleteAccountAsync" class="btn btn-danger">Delete Account</button>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? email;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        email = await UserManager.GetEmailAsync(user);

        Input.PhoneNumber ??= phoneNumber;
        Input.Email ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        var hasChanges = false;

        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (!string.IsNullOrEmpty(Input.Email) && Input.Email != email)
        {
            var setEmailResult = await UserManager.SetEmailAsync(user, Input.Email);
            if (!setEmailResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update email.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (!string.IsNullOrEmpty(Input.NewPassword))
        {
            if (Input.NewPassword != Input.ConfirmPassword)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Passwords do not match.", HttpContext);
                return;
            }

            var changePasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update password.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (hasChanges)
        {
            await SignInManager.RefreshSignInAsync(user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }
    }

    private async Task DeleteAccountAsync()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete your account? This action cannot be undone."))
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                await SignInManager.SignOutAsync();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to delete account.", HttpContext);
            }
        }
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [EmailAddress]
        [Display(Name = "Email")]
        public string? Email { get; set; }

        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
