@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Profile</PageTitle>

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Manage Your Profile</h3>
        <StatusMessage />

        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Username" disabled />
                <label class="form-label">Username</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" placeholder="Email" />
                <label class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Phone number" />
                <label class="form-label">Phone Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.CurrentPassword" class="form-control" placeholder="Current password" />
                <label class="form-label">Current Password</label>
                <ValidationMessage For="() => Input.CurrentPassword" class="text-danger" />
            </div>


            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" placeholder="New password" />
                <label class="form-label">New Password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" placeholder="Confirm new password" />
                <label class="form-label">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Save Changes</button>
        </EditForm>

        <div class="mt-4 border-top pt-4 text-center">
            <h4>Delete Account</h4>
            <p class="text-danger">Warning: This action cannot be undone.</p>
            <button @onclick="DeleteAccountAsync" class="btn btn-danger">Delete Account</button>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? email;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        email = await UserManager.GetEmailAsync(user);

        Input.PhoneNumber ??= phoneNumber;
        Input.Email ??= email;
    }

    private async Task OnValidSubmitAsync()
{
    var hasChanges = false;

    if (Input.PhoneNumber != phoneNumber)
    {
        var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        if (!setPhoneResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            return;
        }
        hasChanges = true;
    }

    if (!string.IsNullOrEmpty(Input.Email) && Input.Email != email)
    {
        var setEmailResult = await UserManager.SetEmailAsync(user, Input.Email);
        if (!setEmailResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update email.", HttpContext);
            return;
        }
        hasChanges = true;
    }

    if (!string.IsNullOrEmpty(Input.NewPassword))
    {
        if (Input.NewPassword != Input.ConfirmPassword)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Passwords do not match.", HttpContext);
            return;
        }

        if (await UserManager.HasPasswordAsync(user))
        {
            // If the user already has a password, require the current password
            if (string.IsNullOrEmpty(Input.CurrentPassword))
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Please enter your current password.", HttpContext);
                return;
            }

            var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.CurrentPassword, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update password.", HttpContext);
                return;
            }
        }
        else
        {
            // If the user does not have a password, add one
            var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword);
            if (!addPasswordResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update password.", HttpContext);
                return;
            }
        }
        hasChanges = true;
    }

    if (hasChanges)
    {
        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }
}


    private async Task DeleteAccountAsync()
{
    Console.WriteLine("DeleteAccountAsync triggered.");
    
    // Confirm deletion using JavaScript
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete your account? This action cannot be undone.");
    Console.WriteLine($"Confirm result: {confirmed}");
    
    if (!confirmed)
    {
        Console.WriteLine("User cancelled deletion.");
        return;
    }

    // Attempt to delete the user
    var result = await UserManager.DeleteAsync(user);
    if (result.Succeeded)
    {
        Console.WriteLine("User deleted successfully.");
        await SignInManager.SignOutAsync();
        NavigationManager.NavigateTo("/");
    }
    else
    {
        var errors = string.Join("; ", result.Errors.Select(e => e.Description));
        Console.WriteLine($"Deletion failed: {errors}");
        RedirectManager.RedirectToCurrentPageWithStatus($"Error: Failed to delete account. {errors}", HttpContext);
    }
}


    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [EmailAddress]
        [Display(Name = "Email")]
        public string? Email { get; set; }

        [Display(Name = "Current password")]
        public string? CurrentPassword { get; set; }

        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
