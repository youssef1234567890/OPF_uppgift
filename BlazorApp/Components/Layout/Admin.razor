@page "/admin"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "admin")]
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<h3>Admin Dashboard</h3>
<p>Welcome, Admin!</p>

@if (loading)
{
    <p>Loading accounts...</p>
}
else if (users.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete User</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No accounts found.</p>
}

@code {
    private List<ApplicationUser> users = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        loading = true;
        // Retrieve all users from UserManager
        // UserManager.Users returns an IQueryable, so we use ToList() (or ToListAsync() if supported)
        users = await Task.Run(() => UserManager.Users.ToList());
        loading = false;
    }

    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                // Refresh the list of users after deletion
                await LoadUsersAsync();
            }
            else
            {
                Console.WriteLine($"Failed to delete user {userId}.");
            }
        }
    }
}
