@page "/admin"

@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "admin")]
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Admin Dashboard</h3>
        <p class="text-center">Welcome, Admin!</p>

        @if (loading)
        {
            <p class="text-center">Loading accounts...</p>
        }
        else if (users.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>User Name</th>
                            <th>Email</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>@user.UserName</td>
                                <td>@user.Email</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete User</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-muted">No accounts found.</p>
        }
    </div>
</div>

@code {
    private List<ApplicationUser> users = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        loading = true;
        users = await Task.Run(() => UserManager.Users.ToList());
        loading = false;
    }

    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                await LoadUsersAsync();
            }
            else
            {
                Console.WriteLine($"Failed to delete user {userId}.");
            }
        }
    }
}
