@implements IDisposable

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Reddit 2</a>
    </div>
</div>

<div class="nav-scrollable">
    <nav class="d-flex flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock" aria-hidden="true"></span> Auth Required
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> Manage Account
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/mainadmin">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> Main Admin
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/admin">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> Admin
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/log">
                        <span class="bi bi-file-earmark-text" aria-hidden="true"></span> Log Messages
                    </NavLink>
                </div>
                @* <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/chat/Film">
                        <span class="bi bi-chat-dots-fill" aria-hidden="true"></span> Chat for Films
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/chat/Games">
                        <span class="bi bi-chat-dots-fill" aria-hidden="true"></span> Chat for Games
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/chat/Series">
                        <span class="bi bi-chat-dots-fill" aria-hidden="true"></span> Chat for Series
                    </NavLink>
                </div> *@
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/categories">
                        <span class="bi bi-layout-text-window" aria-hidden="true"></span> Forum Categorie
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <button @onclick="Logout" class="nav-link">
                        <span class="bi bi-arrow-bar-left" aria-hidden="true"></span> Logout
                    </button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    // Initializes the component and sets up navigation event handling
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    // Handles location changes to update the current URL
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Navigation error: {ex}");
        }
    }

    // Logs out the user by navigating to the logout page
    private void Logout()
    {
        NavigationManager.NavigateTo("Account/Logout", forceLoad: true);
    }

    // Disposes of the component and removes the navigation event handler
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}