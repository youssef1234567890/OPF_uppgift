@* Page setup, dependencies, and authorization *@
@page "/chat/Film"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager

@* Main container for the Film Chat UI *@
<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        @* Chat title *@
        <h3 class="text-center mb-4">Film Chat</h3>

        @* Render chat UI based on authorization state *@
        <AuthorizeView>
            <Authorized>
                @* Input area for new message *@
                <div class="mb-3">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="newMessageText" @onkeypress="HandleKeyPress" placeholder="Enter message..." />
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(newMessageText)">Send</button>
                    </div>
                </div>

                @* If replying, show the reply context with a cancel button *@
                @if (!string.IsNullOrEmpty(replyingToMessage))
                {
                    <div class="alert alert-info d-flex justify-content-between align-items-center">
                        <span><strong>Replying to:</strong> @replyingToMessage</span>
                        <button class="btn btn-sm btn-outline-danger" @onclick="CancelReply">Cancel</button>
                    </div>
                }

                @* Chat box: displays messages in a scrollable container *@
                <div class="chat-box border rounded p-3" style="max-width: 600px; height: 400px; overflow-y: auto; background-color: #f8f9fa;">
                    @if (messages.Any())
                    {
                        @foreach (var message in messages)
                        {
                            <div class="border-bottom pb-2 mb-2">
                                <strong>@message.UserName</strong>: @message.Text
                                <em class="text-muted" style="font-size: 0.8rem;">(@message.Timestamp.ToLocalTime())</em>

                                @* Display reply info if available *@
                                @if (!string.IsNullOrEmpty(message.ReplyTo))
                                {
                                    <div class="text-muted" style="margin-left: 20px; font-style: italic; font-size: 0.9rem;">
                                        ↪️ Replying to: @message.ReplyTo
                                    </div>
                                }

                                @* Action buttons: Reply and, if allowed, Delete message *@
                                <div class="mt-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetReplyContext(message.Text)">Reply</button>
                                    @if (message.UserName == currentUser || isAdmin)
                                    {
                                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteMessage(message.Id)">Delete</button>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted">No messages yet.</div>
                    }
                </div>
            </Authorized>

            @* Message for users who are not logged in *@
            <NotAuthorized>
                <p class="text-center text-danger">You must be logged in to access the chat.</p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@* Code block: handles chat state and events *@
@code {
    // Variables to store current user info, new message input, reply context, and messages list.
    private string currentUser = string.Empty;
    private string currentUserId = string.Empty; // New: store the user's ID
    private ApplicationUser currentUserEntity = null!; // New: store the ApplicationUser entity
    private string newMessageText = string.Empty;
    private string replyingToMessage = string.Empty;
    private List<Message> messages = new();
    private bool isAdmin = false;

    // On initialization, retrieve user info and load messages from the "Film" chat room.
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = user.Identity.Name ?? "Unknown";

            var identityUser = await UserManager.FindByNameAsync(currentUser);
            if (identityUser != null)
            {
                currentUserId = identityUser.Id;      // Save the user's ID
                currentUserEntity = identityUser;       // Save the entire user object
                var roles = await UserManager.GetRolesAsync(identityUser);
                isAdmin = roles.Contains("mainadmin") || roles.Contains("admin");
            }
        }

        messages = await dbContext.Messages
                                  .Where(m => m.ChatRoom == "Film")
                                  .OrderBy(m => m.Timestamp)
                                  .ToListAsync();
    }

    // SendMessage: creates, saves, and displays a new message.
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageText))
        {
            var message = new Message
            {
                // Removed: UserName = currentUser,
                // Instead, assign the foreign key and navigation property:
                ApplicationUserId = currentUserId,
                ApplicationUser = currentUserEntity,
                Text = newMessageText,
                Timestamp = DateTime.UtcNow,
                ChatRoom = "Film",
                ReplyTo = replyingToMessage
            };

            dbContext.Messages.Add(message);
            await dbContext.SaveChangesAsync();
            messages.Add(message);

            newMessageText = string.Empty;
            replyingToMessage = string.Empty;
            StateHasChanged();
        }
    }

    // HandleKeyPress: triggers SendMessage when Enter key is pressed.
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    // DeleteMessage: removes a message if the current user is the owner or an admin.
    private async Task DeleteMessage(int messageId)
    {
        var message = await dbContext.Messages.FindAsync(messageId);
        if (message != null && (message.UserName == currentUser || isAdmin))
        {
            dbContext.Messages.Remove(message);
            await dbContext.SaveChangesAsync();
            messages.Remove(message);
            StateHasChanged();
        }
    }

    // SetReplyContext: sets the reply context to the selected message text.
    private void SetReplyContext(string originalMessage)
    {
        replyingToMessage = originalMessage;
    }

    // CancelReply: clears the current reply context.
    private void CancelReply()
    {
        replyingToMessage = string.Empty;
    }
}
