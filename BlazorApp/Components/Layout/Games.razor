@page "/chat/Games"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ChatContext dbContext
@inject UserManager<ApplicationUser> UserManager

<h3>Games Chat</h3>

<AuthorizeView>
    <Authorized>
        <div>
            <input type="text" @bind="newMessageText" placeholder="Enter message..." />
            <button @onclick="SendMessage">Send</button>
        </div>

        <!-- Chat messages container -->
        <div style="border: 1px solid #ccc; width: 400px; height: 250px; overflow-y: auto; margin-top: 10px;">
            @if (messages.Any())
            {
                @foreach (var message in messages)
                {
                    <div style="margin: 5px;">
                        <strong>@message.UserName</strong>: @message.Text
                        <em>(@message.Timestamp.ToLocalTime())</em>

                        <!-- Allow admins to delete any message -->
                        @if (message.UserName == currentUser || isAdmin)
                        {
                            <button @onclick="() => DeleteMessage(message.Id)">Delete</button>
                        }
                    </div>
                }
            }
            else
            {
                <div style="margin: 5px;">No messages yet.</div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to access the chat.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string currentUser = string.Empty;
    private string newMessageText = string.Empty;
    private List<Message> messages = new();
    private bool isAdmin = false; // Flag to track admin status

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = user.Identity.Name ?? "Unknown";

            // Check if the current user is an admin or mainadmin
            var identityUser = await UserManager.FindByNameAsync(currentUser);
            if (identityUser != null)
            {
                var roles = await UserManager.GetRolesAsync(identityUser);
                isAdmin = roles.Contains("mainadmin") || roles.Contains("admin");
            }
        }

        // Load messages for the "Games" chat room
        messages = await dbContext.Messages
                                  .Where(m => m.ChatRoom == "Games")
                                  .OrderBy(m => m.Timestamp)
                                  .ToListAsync();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageText))
        {
            var message = new Message
            {
                UserName = currentUser,
                Text = newMessageText,
                Timestamp = DateTime.UtcNow,
                ChatRoom = "Games"
            };

            dbContext.Messages.Add(message);
            await dbContext.SaveChangesAsync();
            messages.Add(message);
            newMessageText = string.Empty;
        }
    }

    private async Task DeleteMessage(int messageId)
    {
        var message = await dbContext.Messages.FindAsync(messageId);
        if (message is not null && (message.UserName == currentUser || isAdmin))
        {
            dbContext.Messages.Remove(message);
            await dbContext.SaveChangesAsync();
            messages.Remove(message);
        }
    }
}
