@page "/chat/Games"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ChatContext dbContext
@inject UserManager<ApplicationUser> UserManager

<h3>Games Chat</h3>

<AuthorizeView>
    <Authorized>
        <!-- Message Input -->
        <div>
            <input type="text" @bind="newMessageText" @onkeypress="HandleKeyPress" placeholder="Enter message..." />
            <button @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(newMessageText)">Send</button>
        </div>

        <!-- Display Reply Context if exists -->
        @if (!string.IsNullOrEmpty(replyingToMessage))
        {
            <div style="margin-top: 10px; padding: 5px; border-left: 3px solid #007bff;">
                <strong>Replying to:</strong> @replyingToMessage
                <button @onclick="CancelReply" style="margin-left: 10px;">Cancel</button>
            </div>
        }

        <!-- Chat Messages Container -->
        <div style="border: 1px solid #ccc; width: 600px; height: 400px; overflow-y: auto; margin-top: 10px;">
            @if (messages.Any())
            {
                @foreach (var message in messages)
                {
                    <div style="margin: 5px;">
                        <strong>@message.UserName</strong>: @message.Text
                        <em>(@message.Timestamp.ToLocalTime())</em>

                        <!-- Display reply reference if present -->
                        @if (!string.IsNullOrEmpty(message.ReplyTo))
                        {
                            <div style="margin-left: 20px; font-style: italic; color: #555;">
                                ↪️ Replying to: @message.ReplyTo
                            </div>
                        }

                        <!-- Action Buttons: Reply/Delete -->
                        <button @onclick="() => SetReplyContext(message.Text)">Reply</button>

                        @if (message.UserName == currentUser || isAdmin)
                        {
                            <button @onclick="() => DeleteMessage(message.Id)">Delete</button>
                        }
                    </div>
                }
            }
            else
            {
                <div style="margin: 5px;">No messages yet.</div>
            }
        </div>
    </Authorized>

    <NotAuthorized>
        <p>You must be logged in to access the chat.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string currentUser = string.Empty;
    private string newMessageText = string.Empty;
    private string replyingToMessage = string.Empty; // Holds the message being replied to
    private List<Message> messages = new();
    private bool isAdmin = false; // Admin check

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = user.Identity.Name ?? "Unknown";

            // Check if user is admin or mainadmin
            var identityUser = await UserManager.FindByNameAsync(currentUser);
            if (identityUser != null)
            {
                var roles = await UserManager.GetRolesAsync(identityUser);
                isAdmin = roles.Contains("mainadmin") || roles.Contains("admin");
            }
        }

        // Load Games chat messages
        messages = await dbContext.Messages
                                  .Where(m => m.ChatRoom == "Games")
                                  .OrderBy(m => m.Timestamp)
                                  .ToListAsync();
    }

    // Send message (with optional reply)
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageText))
        {
            var message = new Message
            {
                UserName = currentUser,
                Text = newMessageText,
                Timestamp = DateTime.UtcNow,
                ChatRoom = "Games",
                ReplyTo = replyingToMessage
            };

            dbContext.Messages.Add(message);
            await dbContext.SaveChangesAsync();
            messages.Add(message);

            newMessageText = string.Empty;
            replyingToMessage = string.Empty; // Clear reply context
            StateHasChanged();
        }
    }

    // Allow sending message by pressing Enter key
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    // Delete a message (only if owner or admin)
    private async Task DeleteMessage(int messageId)
    {
        var message = await dbContext.Messages.FindAsync(messageId);
        if (message != null && (message.UserName == currentUser || isAdmin))
        {
            dbContext.Messages.Remove(message);
            await dbContext.SaveChangesAsync();
            messages.Remove(message);
            StateHasChanged();
        }
    }

    // Set the reply context
    private void SetReplyContext(string originalMessage)
    {
        replyingToMessage = originalMessage;
    }

    // Cancel replying
    private void CancelReply()
    {
        replyingToMessage = string.Empty;
    }
}