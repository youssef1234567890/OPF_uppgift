@page "/categories"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbContext

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Forum Categories</h3>
        
        <div class="row">
            @foreach (var category in categories)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@category</h5>
                            <p class="card-text">
                                <span class="badge bg-primary">@GetThreadCount(category) threads</span>
                                <span class="badge bg-secondary ms-2">@GetMessageCount(category) messages</span>
                            </p>
                            <a href="/category/@category" class="btn btn-outline-primary">View Discussions</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (!categories.Any())
        {
            <div class="alert alert-info">
                No categories found.
            </div>
        }
    </div>
</div>

@code {
    private List<string> categories = new List<string>
    {
        "Film",
        "Games",
        "Series",
    };
    
    private Dictionary<string, int> threadCounts = new();
    private Dictionary<string, int> messageCounts = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Get thread counts for each category
        var threads = await dbContext.Threads.ToListAsync();
        foreach (var category in categories)
        {
            threadCounts[category] = threads.Count(t => t.Category == category);
        }
        
        // Get message counts for each category
        var messages = await dbContext.Messages
            .Include(m => m.Thread)
            .ToListAsync();
            
        foreach (var category in categories)
        {
            messageCounts[category] = messages.Count(m => m.Thread != null && m.Thread.Category == category);
        }
    }
    
    private int GetThreadCount(string category)
    {
        return threadCounts.TryGetValue(category, out var count) ? count : 0;
    }
    
    private int GetMessageCount(string category)
    {
        return messageCounts.TryGetValue(category, out var count) ? count : 0;
    }
}