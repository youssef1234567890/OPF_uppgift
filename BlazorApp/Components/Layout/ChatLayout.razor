@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorApp.Components.Layout

<!-- Top Navbar -->
<div class="navbar" style="display: flex; gap: 1rem; background: #f5f5f5; padding: 1rem;">
    <button @onclick=@(() => NavigationManager.NavigateTo("/admin"))>Admin</button>
    <button @onclick=@(() => NavigationManager.NavigateTo("/log"))>Website Log</button>
    <button @onclick=@(() => NavigationManager.NavigateTo("/settings"))>Settings</button>
</div>

<!-- Chat Channel Buttons -->
<div class="chat-channel-buttons" style="display: flex; gap: 1rem; margin: 1rem 0;">
    <button class='@GetChannelButtonClass("Film")' @onclick=@(() => SelectChannel("Film"))>Film</button>
    <button class='@GetChannelButtonClass("Series")' @onclick=@(() => SelectChannel("Series"))>Series</button>
    <button class='@GetChannelButtonClass("Games")' @onclick=@(() => SelectChannel("Games"))>Games</button>
</div>

<!-- Chat Window -->
<div class="chat-window" style="border: 1px solid #ccc; padding: 1rem; height: 300px; overflow-y: auto;">
    @foreach (var message in FilteredMessages)
    {
        <div class="chat-message" style="margin-bottom: 0.5rem;">
            <strong>@message.User:</strong> @message.Text
        </div>
    }
</div>

<!-- Chat Input -->
<div class="chat-input" style="margin-top: 1rem; display: flex; gap: 0.5rem;">
    <input type="text"
           @bind="NewMessage"
           placeholder="Type your message here..."
           style="flex: 1; padding: 0.5rem;" />
    <button @onclick=@SendMessage style="padding: 0.5rem 1rem;">Send</button>
</div>

@code {
    // Holds the currently selected chat channel
    private string CurrentChannel = "Film";
    private string NewMessage = "";

    // Simple chat message model
    public class ChatMessage
    {
        public string User { get; set; }
        public string Text { get; set; }
        public string Channel { get; set; }
    }

    // In-memory storage for chat messages (for demonstration)
    private List<ChatMessage> AllMessages = new List<ChatMessage>();

    // Filter messages based on the selected channel
    private IEnumerable<ChatMessage> FilteredMessages =>
        AllMessages.Where(m => m.Channel == CurrentChannel);

    // Change the current chat channel
    private void SelectChannel(string channel)
    {
        CurrentChannel = channel;
    }

    // Sends a message to the current channel
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authState.User.Identity.IsAuthenticated ? authState.User.Identity.Name : "Anonymous";

            AllMessages.Add(new ChatMessage
            {
                User = userName,
                Text = NewMessage,
                Channel = CurrentChannel
            });

            // Clear the input box after sending
            NewMessage = string.Empty;
        }
    }

    // Returns a CSS class to highlight the active channel button
    private string GetChannelButtonClass(string channel) =>
        channel == CurrentChannel ? "active" : "";
}
