@page "/log"

@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ChatContext dbContext
@inject UserManager<ApplicationUser> UserManager

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Chat Log History</h3>
        <p class="text-center">View messages from Film, Games, and Series chat rooms.</p>

        @if (loading)
        {
            <p class="text-center">Loading logs...</p>
        }
        else if (logs.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>User Name</th>
                            <th>Chat Room</th>
                            <th>Message</th>
                            <th>Timestamp</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in logs)
                        {
                            <tr>
                                <td>@log.UserName</td>
                                <td>@log.ChatRoom</td>
                                <td>@log.Text</td>
                                <td>@log.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-muted">No logs found.</p>
        }
    </div>
</div>

@code {
    private List<Message> logs = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogsAsync();
    }

    private async Task LoadLogsAsync()
    {
        loading = true;

        try
        {
            // Fetch messages from Film, Games, and Series chat rooms
            logs = await dbContext.Messages
                .Where(m => m.ChatRoom == "Film" || m.ChatRoom == "Games" || m.ChatRoom == "Series")
                .OrderByDescending(m => m.Timestamp) // Show newest messages first
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading logs: {ex.Message}");
        }

        loading = false;
    }
}
