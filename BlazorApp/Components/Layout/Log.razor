@page "/log"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]
@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager

<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        <h3 class="text-center mb-4">Messages Overview</h3>
        <p class="text-center">Overview of all chats within threads.</p>

        <div class="mb-3 d-flex justify-content-between align-items-center">
            <!-- Toggle button for sorting by date (newest or oldest first) -->
            <button class="btn btn-secondary" @onclick="ToggleSortOrder">
                Sort by Date: @(sortDescending ? "Newest First" : "Oldest First")
            </button>

            <!-- Dropdown to filter logs by user -->
            <select class="form-select w-auto" @onchange="OnUserFilterChanged">
                <option value="All" selected="@("All" == selectedUser)">All Users</option>
                @foreach (var user in distinctUsers)
                {
                    <option value="@user" selected="@(user == selectedUser)">@user</option>
                }
            </select>
        </div>

        @if (loading)
        {
            <p class="text-center">Loading logs...</p>
        }
        else if (groupedLogs.Any())
        {
            @foreach (var group in groupedLogs)
            {
                <div class="mb-4">
                    <h4 class="mb-2">@group.Key</h4>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>User Name</th>
                                    <th>Thread</th>
                                    <th>Message</th>
                                    <th>Timestamp</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var log in group)
                                {
                                    <tr>
                                        <td>@log.ApplicationUser.UserName</td>
                                        <td>@log.ChatRoom</td>
                                        <td>@log.Text</td>
                                        <td>@log.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-center text-muted">No logs found.</p>
        }
    </div>
</div>

@code {
    // Grouped logs by thread (ChatRoom)
    private List<IGrouping<string, Message>> groupedLogs = new();
    private List<string> distinctUsers = new();
    private bool loading = true;
    private bool sortDescending = true;
    private string selectedUser = "All";

    protected override async Task OnInitializedAsync()
    {
        await LoadDistinctUsersAsync();
        await LoadGroupedLogsAsync();
    }

    // Load a list of distinct users for the dropdown filter.
    private async Task LoadDistinctUsersAsync()
    {
        try
        {
            distinctUsers = await dbContext.Messages
                .Include(m => m.ApplicationUser)
                .Where(m => m.ChatRoom != null)
                .Select(m => m.ApplicationUser.UserName!)
                .Distinct()
                .OrderBy(u => u)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading distinct users: {ex.Message}");
        }
    }

    // Load logs based on filter and sort order, then group them by ChatRoom.
    private async Task LoadGroupedLogsAsync()
    {
        loading = true;
        try
        {
            IQueryable<Message> query = dbContext.Messages
                .Include(m => m.ApplicationUser)
                .Where(m => m.ChatRoom != null);

            if (selectedUser != "All")
            {
                query = query.Where(m => m.ApplicationUser.UserName == selectedUser);
            }

            query = sortDescending ? query.OrderByDescending(m => m.Timestamp) : query.OrderBy(m => m.Timestamp);
            var logs = await query.ToListAsync();

            groupedLogs = logs.GroupBy(m => m.ChatRoom).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading logs: {ex.Message}");
        }
        loading = false;
    }

    // Toggle sort order (newest-first vs oldest-first) and reload logs.
    private async Task ToggleSortOrder()
    {
        sortDescending = !sortDescending;
        await LoadGroupedLogsAsync();
    }

    // Update the user filter and reload logs when selection changes.
    private async Task OnUserFilterChanged(ChangeEventArgs e)
    {
        selectedUser = e.Value?.ToString() ?? "All";
        await LoadGroupedLogsAsync();
    }
}
