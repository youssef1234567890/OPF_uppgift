@* Page declaration and role restriction: Only mainadmin can access *@
@page "/mainadmin"
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Roles = "mainadmin")]

@* Main container for the Main Admin Dashboard UI *@
<div class="container mt-5">
    <div class="card p-4 shadow-sm">
        @* Dashboard title and welcome message *@
        <h3 class="text-center mb-4">Main Admin Dashboard</h3>
        <p class="text-center">Welcome, Main Admin!</p>

        @* Loading indicator or user table based on data availability *@
        @if (loading)
        {
            <p class="text-center">Loading users...</p>
        }
        else if (users.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <thead class="table-dark">
                        <tr>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Iterate over users and display their info with action buttons *@
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>@user.Email</td>
                                <td>
                                    @* Show role based on user flags *@
                                    @if (user.IsMainAdmin)
                                    {
                                        <span>Main Admin</span>
                                    }
                                    else if (user.IsAdmin)
                                    {
                                        <span>Admin</span>
                                    }
                                    else
                                    {
                                        <span>User</span>
                                    }
                                </td>
                                <td>
                                    @* Show action buttons only if the user is not a mainadmin *@
                                    @if (!user.IsMainAdmin)
                                    {
                                        @if (user.IsAdmin)
                                        {
                                            <button class="btn btn-warning btn-sm" @onclick="() => DemoteToUser(user.Id)">Demote to User</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => PromoteToAdmin(user.Id)">Promote to Admin</button>
                                        }
                                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteUser(user.Id)">Delete User</button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No actions</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-muted">No users found.</p>
        }
    </div>
</div>

@* Code block: handles user management and dashboard actions *@
@code {
    // List to hold user view models and loading flag
    private List<UserViewModel> users = new();
    private bool loading = true;

    // Inject UserManager and NavigationManager services
    [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    // On initialization, load user data asynchronously
    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    // LoadUsersAsync: Retrieve all users and map roles to view models
    private async Task LoadUsersAsync()
    {
        loading = true;
        var allUsers = UserManager.Users.ToList();
        users = new();

        foreach (var user in allUsers)
        {
            var roles = await UserManager.GetRolesAsync(user);
            users.Add(new UserViewModel
            {
                Id = user.Id,
                Email = user.Email!,
                UserName = user.UserName!,
                IsAdmin = roles.Contains("admin"),
                IsMainAdmin = roles.Contains("mainadmin")
            });
        }
        loading = false;
    }

    // PromoteToAdmin: Adds "admin" role to the user if not already an admin
    private async Task PromoteToAdmin(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null && !await UserManager.IsInRoleAsync(user, "admin"))
        {
            await UserManager.AddToRoleAsync(user, "admin");
            await LoadUsersAsync(); // Refresh user list
        }
    }

    // DemoteToUser: Removes "admin" role from the user if they are currently an admin
    private async Task DemoteToUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null && await UserManager.IsInRoleAsync(user, "admin"))
        {
            await UserManager.RemoveFromRoleAsync(user, "admin");
            await LoadUsersAsync(); // Refresh user list
        }
    }

    // DeleteUser: Deletes a user if they are not a mainadmin
    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            // Prevent deletion if the user is a mainadmin
            if (await UserManager.IsInRoleAsync(user, "mainadmin"))
            {
                Console.WriteLine("Cannot delete a mainadmin.");
                return;
            }

            await UserManager.DeleteAsync(user);
            await LoadUsersAsync(); // Refresh list after deletion
        }
    }

    // UserViewModel: Holds user data and role flags for display
    private class UserViewModel
    {
        public required string Id { get; set; }
        public required string Email { get; set; }
        public required string UserName { get; set; }
        public bool IsAdmin { get; set; }
        public bool IsMainAdmin { get; set; }
    }
}
