@inherits LayoutComponentBase
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject Microsoft.AspNetCore.Identity.SignInManager<ApplicationUser> SignInManager

<style>
  /* Global styles for html and body */
  html, body {
    margin: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #001f3d !important;
    color: #ffffff !important;
    background-image: none !important;
  }
  /* Navbar styles */
  .navbar {
    background: linear-gradient(135deg, #28a745, #218838);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  .navbar-left h1 {
    color: #fff;
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
  }
  .navbar-right a {
    color: #fff;
    text-decoration: none;
    font-size: 1.1rem;
    border: 2px solid #fff;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background 0.3s, color 0.3s;
  }
  .navbar-right a:hover {
    background: #fff;
    color: #218838;
  }
  /* Main content area */
  .main-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 80px);
    padding: 2rem;
    text-align: center;
  }
  /* Chat container styling */
  .chat-container {
    background: rgba(255, 255, 255, 0.8);
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    max-width: 600px;
    width: 100%;
    color: #000;
  }
  /* Chat Channel Buttons */
  .chat-channel-buttons button {
    padding: 0.5rem 1rem;
    border: none;
    background: #007bff;
    color: #fff;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
  }
  .chat-channel-buttons button.active {
    background: #ffc107;
  }
  .chat-channel-buttons button:hover {
    opacity: 0.9;
  }
  /* Chat Window */
  .chat-window {
    border: 1px solid #ccc;
    padding: 1rem;
    height: 300px;
    overflow-y: auto;
    margin-top: 1rem;
    background: #fff;
    color: #000;
  }
  /* Chat Input */
  .chat-input {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }
  .chat-input input[type="text"] {
    flex: 1;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
  .chat-input button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    background: #28a745;
    color: #fff;
    cursor: pointer;
    transition: background 0.3s;
  }
  .chat-input button:hover {
    background: #218838;
  }
  /* Authentication Buttons */
  .auth-buttons button {
    flex: 1;
    margin: 0 0.5rem;
    padding: 2rem;
    font-size: 1.5rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
  }
  .auth-buttons .register {
    background-color: #007bff;
    color: white;
  }
  .auth-buttons .login {
    background-color: #ffc107;
    color: white;
  }
  /* Logout Button */
  .logout-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
  }
  .logout-button .btn {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    background-color: #dc3545;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .logout-button .btn:hover {
    background-color: #c82333;
  }
  /* Delete button styling */
  .delete-button {
    background: none;
    border: none;
    color: red;
    cursor: pointer;
    margin-left: 0.5rem;
    font-size: 0.9rem;
  }
</style>

<!-- Navbar -->
<div class="navbar">
  <div class="navbar-left">
    <h1>This is my web app</h1>
  </div>
  <div class="navbar-right">
    <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
  </div>
</div>

@* Main layout rendering differs for authenticated users and for unauthenticated users *@
@if (IsAuthenticated)
{
    <!-- Authenticated view (chat content) -->
    <div class="main-content">
      <div class="chat-container">
        <!-- Chat Channel Buttons -->
        <div class="chat-channel-buttons">
          <button class="@GetChannelButtonClass("Film")" @onclick="@(() => SelectChannel("Film"))">Film</button>
          <button class="@GetChannelButtonClass("Series")" @onclick="@(() => SelectChannel("Series"))">Series</button>
          <button class="@GetChannelButtonClass("Games")" @onclick="@(() => SelectChannel("Games"))">Games</button>
        </div>
        <!-- Chat Window -->
        <div class="chat-window">
          @foreach (var message in FilteredMessages)
          {
              <div class="chat-message" style="margin-bottom: 0.5rem;">
                <strong>@message.User:</strong> @message.Text
                @if (message.User == CurrentUser)
                {
                    <button class="delete-button" @onclick="@(() => DeleteMessage(message))">Delete</button>
                }
              </div>
          }
        </div>
        <!-- Chat Input -->
        <div class="chat-input">
          <input type="text" @bind="NewMessage" placeholder="Type your message here..." />
          <button @onclick="SendMessage">Send</button>
        </div>
      </div>
    </div>
}
else
{
    <!-- Unauthenticated view -->
    <div class="main-content">
        @if (IsLoginPage)
        {
            @Body  @* Render the login page content if the current URL is the login page *@
        }
        else if (!IsRedirecting)
        {
            <p>You must be logged in to access this application.</p>
            <div class="auth-buttons" style="justify-content: center;">
                <button class="register" @onclick="NavigateToRegister">Register</button>
                <button class="login" @onclick="NavigateToLogin">Login</button>
            </div>
        }
        else
        {
            <p>Redirecting...</p>
        }
    </div>
}

@if (IsAuthenticated)
{
  <!-- Logout Button (only visible when authenticated) -->
  <div class="logout-button">
      <button class="btn" @onclick="Logout">Log Out</button>
  </div>
}

<!-- Blazor Error UI -->
<div id="blazor-error-ui">
  An unhandled error has occurred.
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

@code {
  // Authentication state and user information.
  private bool IsAuthenticated;
  private string CurrentUser = "";
  // Flag used to hide the buttons while redirecting.
  private bool IsRedirecting = false;

  // Chat functionality.
  private string CurrentChannel = "Film";
  private string NewMessage = "";
  private List<ChatMessage> AllMessages = new List<ChatMessage>();

  // URLs for login/register navigation.
  private const string RegisterUrl = "/Account/Register";
  private const string LoginUrl = "/Identity/Account/Login";

  // Computed property: if current URL ends with the login route.
  private bool IsLoginPage =>
      Navigation.Uri.EndsWith("/Identity/Account/Login", StringComparison.OrdinalIgnoreCase) ||
      Navigation.Uri.EndsWith("/Account/Login", StringComparison.OrdinalIgnoreCase);

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    IsAuthenticated = user.Identity?.IsAuthenticated ?? false;
    CurrentUser = IsAuthenticated ? (user.Identity?.Name ?? "Anonymous") : "Anonymous";

    if (IsAuthenticated)
    {
        AllMessages = await DbContext.ChatMessages.ToListAsync();
    }
  }

  // Filters messages by channel.
  private IEnumerable<ChatMessage> FilteredMessages =>
    AllMessages.Where(m => m.Channel == CurrentChannel).OrderBy(m => m.Timestamp);

  private void SelectChannel(string channel) => CurrentChannel = channel;

  private async Task SendMessage()
  {
    if (!string.IsNullOrWhiteSpace(NewMessage) && IsAuthenticated)
    {
      var message = new ChatMessage
      {
        User = CurrentUser,
        Text = NewMessage,
        Channel = CurrentChannel
      };

      DbContext.ChatMessages.Add(message);
      await DbContext.SaveChangesAsync();
      AllMessages.Add(message);
      NewMessage = string.Empty;
    }
  }

  private async Task DeleteMessage(ChatMessage message)
  {
    if (message.User == CurrentUser)
    {
      DbContext.ChatMessages.Remove(message);
      await DbContext.SaveChangesAsync();
      AllMessages.Remove(message);
    }
  }

  private string GetChannelButtonClass(string channel) =>
    channel == CurrentChannel ? "active" : "";

  // Navigate to the Register page. Use forceLoad so a full page load occurs.
  private void NavigateToRegister()
  {
    IsRedirecting = true;
    Navigation.NavigateTo(RegisterUrl, forceLoad: true);
  }

  // Navigate to the Login page. Use forceLoad to ensure a full navigation.
  private void NavigateToLogin()
  {
    IsRedirecting = true;
    Navigation.NavigateTo(LoginUrl, forceLoad: true);
  }

  // Log out the current user.
  private async Task Logout()
  {
    try
    {
        await SignInManager.SignOutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }
    catch (Exception ex)
    {
        Console.Error.WriteLine("Error during logout: " + ex.Message);
    }
  }
}
