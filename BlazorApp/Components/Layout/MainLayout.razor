@inherits LayoutComponentBase
@using BlazorApp.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore

<style>
  /* Global styles for html and body */
  html, body {
    margin: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #001f3d !important;
    color: #ffffff !important;
    background-image: none !important;
  }

  /* Navbar styles */
  .navbar {
    background: linear-gradient(135deg, #28a745, #218838);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .navbar-left h1 {
    color: #fff;
    margin: 0;
    font-size: 1.75rem;
    font-weight: 600;
  }

  .navbar-right a {
    color: #fff;
    text-decoration: none;
    font-size: 1.1rem;
    border: 2px solid #fff;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: background 0.3s, color 0.3s;
  }

  .navbar-right a:hover {
    background: #fff;
    color: #218838;
  }

  /* Main content area */
  .main-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 80px); /* Adjust based on navbar height */
    padding: 2rem;
    text-align: center;
  }

  /* Chat container styling */
  .chat-container {
    background: rgba(255, 255, 255, 0.8);
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    max-width: 600px;
    width: 100%;
    color: #000;
  }

  /* Chat Channel Buttons */
  .chat-channel-buttons button {
    padding: 0.5rem 1rem;
    border: none;
    background: #007bff;
    color: #fff;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
  }

  .chat-channel-buttons button.active {
    background: #ffc107;
  }

  .chat-channel-buttons button:hover {
    opacity: 0.9;
  }

  /* Chat Window */
  .chat-window {
    border: 1px solid #ccc;
    padding: 1rem;
    height: 300px;
    overflow-y: auto;
    margin-top: 1rem;
    background: #fff;
    color: #000;
  }

  /* Chat Input */
  .chat-input {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .chat-input input[type="text"] {
    flex: 1;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ccc;
  }

  .chat-input button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    background: #28a745;
    color: #fff;
    cursor: pointer;
    transition: background 0.3s;
  }

  .chat-input button:hover {
    background: #218838;
  }

  /* Registration/Login Buttons */
  .auth-buttons button {
    flex: 1;
    margin: 0 0.5rem;
    padding: 2rem;
    font-size: 1.5rem;
    border: none;
    border-radius: 10px;
    cursor: pointer;
  }

  .auth-buttons .register {
    background-color: #007bff;
    color: white;
  }

  .auth-buttons .login {
    background-color: #ffc107;
    color: white;
  }

  /* Delete button styling */
  .delete-button {
    background: none;
    border: none;
    color: red;
    cursor: pointer;
    margin-left: 0.5rem;
    font-size: 0.9rem;
  }
</style>

<!-- Navbar -->
<div class="navbar">
  <div class="navbar-left">
    <h1>This is my web app</h1>
  </div>
  <div class="navbar-right">
    <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
  </div>
</div>

<!-- Main Content -->
<div class="main-content">
  <div class="chat-container">
    <!-- Chat Channel Buttons -->
    <div class="chat-channel-buttons">
      <button class="@GetChannelButtonClass("Film")" @onclick="@(() => SelectChannel("Film"))">Film</button>
      <button class="@GetChannelButtonClass("Series")" @onclick="@(() => SelectChannel("Series"))">Series</button>
      <button class="@GetChannelButtonClass("Games")" @onclick="@(() => SelectChannel("Games"))">Games</button>
    </div>

    <!-- Chat Window -->
    <div class="chat-window">
      @foreach (var message in FilteredMessages)
      {
          <div class="chat-message" style="margin-bottom: 0.5rem;">
            <strong>@message.User:</strong> @message.Text
            @if (message.User == CurrentUser)
            {
                <button class="delete-button" @onclick="@(() => DeleteMessage(message))">Delete</button>
            }
          </div>
      }
    </div>

    <!-- Chat Input -->
    <div class="chat-input">
      <input type="text" @bind="NewMessage" placeholder="Type your message here..." />
      <button @onclick="SendMessage">Send</button>
    </div>
  </div>
</div>

<!-- Authentication Buttons -->
<div class="auth-buttons" style="display: flex; justify-content: space-between; padding: 2rem;">
  @if (!IsAuthenticated && !(NavigationManager.Uri.Contains("Account/Register") || NavigationManager.Uri.Contains("Account/Login")))
  {
      <button class="register" @onclick="@(() => NavigationManager.NavigateTo("Account/Register"))">
          Register
      </button>
      <button class="login" @onclick="@(() => NavigationManager.NavigateTo("Account/Login"))">
          Login
      </button>
  }
</div>

<!-- Blazor Error UI -->
<div id="blazor-error-ui">
  An unhandled error has occurred.
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

@code {
  // Authentication state
  private bool IsAuthenticated;
  private string CurrentUser = "";
  private string CurrentChannel = "Film";
  private string NewMessage = "";
  private List<ChatMessage> AllMessages = new List<ChatMessage>();

  protected override async Task OnInitializedAsync()
  {
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    IsAuthenticated = user.Identity?.IsAuthenticated ?? false;
    CurrentUser = IsAuthenticated ? (user.Identity?.Name ?? "Anonymous") : "Anonymous";

    // Load persisted messages from the database
    AllMessages = await DbContext.ChatMessages.ToListAsync();
  }

  // Filter messages for the selected channel and order by timestamp.
  private IEnumerable<ChatMessage> FilteredMessages =>
    AllMessages.Where(m => m.Channel == CurrentChannel).OrderBy(m => m.Timestamp);

  // Change the current chat channel.
  private void SelectChannel(string channel)
  {
    CurrentChannel = channel;
  }

  // Send a new message, persisting it to the database and updating the UI.
  private async Task SendMessage()
  {
    if (!string.IsNullOrWhiteSpace(NewMessage))
    {
      var message = new ChatMessage
      {
        User = CurrentUser,
        Text = NewMessage,
        Channel = CurrentChannel
      };

      DbContext.ChatMessages.Add(message);
      await DbContext.SaveChangesAsync();
      AllMessages.Add(message);
      NewMessage = string.Empty;
    }
  }

  // Delete a message if it belongs to the current user.
  private async Task DeleteMessage(ChatMessage message)
  {
    if (message.User == CurrentUser)
    {
      DbContext.ChatMessages.Remove(message);
      await DbContext.SaveChangesAsync();
      AllMessages.Remove(message);
    }
  }

  // Return a CSS class for active channel buttons.
  private string GetChannelButtonClass(string channel) =>
    channel == CurrentChannel ? "active" : "";
}
